import os
import platform

path = '../src'

env = Environment()

def SetupEnvironment(env):
    # Include paths
    path_list = []
    if 'C_INCLUDE_PATH' in os.environ:
        path_list.extend(os.environ['C_INCLUDE_PATH'].split(':'))
    if 'CPLUS_INCLUDE_PATH' in os.environ:
        path_list.extend(os.environ['CPLUS_INCLUDE_PATH'].split(':'))
    env.Append(CPPPATH=path_list)
    # Library paths
    path_list = []
    if 'LIBRARY_PATH' in os.environ:
        path_list.extend(os.environ['LIBRARY_PATH'].split(':'))
    env.Append(LIBPATH=path_list)

def SourceList(name, local=None, include=None, exclude=None):
    base_list = [
        'config.cc',
        'constants.cc',
        'envelope.cc',
        'logging.cc',
        'loop.cc',
        'settings.cc',
        'third_party/inih/ini.c',
        'utils.cc',
        'xmpp_presence_task.cc',
        'xmpp_pump.cc',
    ]
    local = local or []
    include = include or []
    exclude = exclude or []
    for item in include:
        base_list.append(item)
    for item in exclude:
        base_list.remove(item)
    base_list = [os.path.join(path, item) for item in base_list]
    for item in local:
        base_list.append(item)
    base_list = [env.Object('%s_%s.o' % (os.path.basename(item), name), item) for item in base_list]
    return base_list

defines = ['POSIX']
flags = '-Wall -pedantic'
frameworks = []
libraries = ['gtest', 'txmpp']
link = ''
name = 'tyrion'
system = platform.system().lower()

if system == 'linux':
    defines += ['LINUX']
elif system == 'darwin':
    defines += ['OSX']

if 'POSIX' in defines:
    flags += ' -pthread'
    libraries += ['pthread']

env.Append(CFLAGS=flags)
env.Append(CXXFLAGS=flags)
env.Append(FRAMEWORKS=frameworks)

SetupEnvironment(env)

env.Program(
    target='test-config',
    source=SourceList(
        'config',
        local=['test_config.cc'],
    ),
    CPPDEFINES=defines,
    LIBS=libraries,
)

env.Program(
    target='test-envelope',
    source=SourceList(
        'envelope',
        local=['test_envelope.cc'],
    ),
    CPPDEFINES=defines,
    LIBS=libraries,
)

env.Program(
    target='test-logging',
    source=SourceList(
        'logging',
        local=['test_logging.cc'],
    ),
    CPPDEFINES=defines,
    LIBS=libraries,
)

env.Program(
    target='test-node-process',
    source=SourceList(
        'node_process',
        local=['test_node_process.cc'],
        include=['node_process.cc'],
    ),
    CPPDEFINES=defines,
    LIBS=libraries,
)

env.Program(
    target='test-settings',
    source=SourceList(
        'settings',
        local=['test_settings.cc'],
    ),
    CPPDEFINES=defines,
    LIBS=libraries,
)
